=== modified file 'sources/mainwindow.cpp'
--- sources/mainwindow.cpp	2020-01-01 09:12:21 +0000
+++ sources/mainwindow.cpp	2020-01-02 18:54:59 +0000
@@ -3151,7 +3154,7 @@
 
     m_openAction = createAction(tr("&Open..."), QLatin1String("open"), QLatin1String("document-open"), QKeySequence::Open, SLOT(on_open_triggered()));
     m_openInNewTabAction = createAction(tr("Open in new &tab..."), QLatin1String("openInNewTab"), QLatin1String("tab-new"), QKeySequence::AddTab, SLOT(on_openInNewTab_triggered()));
-    m_refreshAction = createAction(tr("&Refresh"), QLatin1String("refresh"), QLatin1String("view-refresh"), QKeySequence::Refresh, SLOT(on_refresh_triggered()));
+    m_refreshAction = createAction(tr("&Refresh"), QLatin1String("refresh"), QLatin1String("view-refresh"), ShortcutHandler::defaultRefreshSequence(), SLOT(on_refresh_triggered()));
     m_saveAction = createAction(tr("&Save"), QLatin1String("save"), QLatin1String("document-save"), QKeySequence::Save, SLOT(on_save_triggered()));
     m_saveAsAction = createAction(tr("Save &as..."), QLatin1String("saveAs"), QLatin1String("document-save-as"), QKeySequence::SaveAs, SLOT(on_saveAs_triggered()));
     m_saveCopyAction = createAction(tr("Save &copy..."), QLatin1String("saveCopy"), QIcon(), QKeySequence(), SLOT(on_saveCopy_triggered()));
@@ -3161,8 +3164,8 @@
 
     // edit
 
-    m_previousPageAction = createAction(tr("&Previous page"), QLatin1String("previousPage"), QLatin1String("go-previous"), QKeySequence(Qt::Key_Backspace), SLOT(on_previousPage_triggered()));
-    m_nextPageAction = createAction(tr("&Next page"), QLatin1String("nextPage"), QLatin1String("go-next"), QKeySequence(Qt::Key_Space), SLOT(on_nextPage_triggered()));
+    m_previousPageAction = createAction(tr("&Previous page"), QLatin1String("previousPage"), QLatin1String("go-previous"), ShortcutHandler::defaultPrevPageSequence(), SLOT(on_previousPage_triggered()));
+    m_nextPageAction = createAction(tr("&Next page"), QLatin1String("nextPage"), QLatin1String("go-next"), ShortcutHandler::defaultNextPageSequence(), SLOT(on_nextPage_triggered()));
 
     const QList< QKeySequence > firstPageShortcuts = QList< QKeySequence >()
             << QKeySequence(Qt::Key_Home)
@@ -3180,7 +3183,7 @@
 
     m_setFirstPageAction = createAction(tr("&Set first page..."), QLatin1String("setFirstPage"), QIcon(), QKeySequence(), SLOT(on_setFirstPage_triggered()));
 
-    m_jumpToPageAction = createAction(tr("&Jump to page..."), QLatin1String("jumpToPage"), QLatin1String("go-jump"), QKeySequence(Qt::CTRL + Qt::Key_J), SLOT(on_jumpToPage_triggered()));
+    m_jumpToPageAction = createAction(tr("&Jump to page..."), QLatin1String("jumpToPage"), QLatin1String("go-jump"), ShortcutHandler::defaultJumpPageSequence(), SLOT(on_jumpToPage_triggered()));
 
     m_jumpBackwardAction = createAction(tr("Jump &backward"), QLatin1String("jumpBackward"), QLatin1String("media-seek-backward"), QKeySequence(Qt::CTRL + Qt::Key_Return), SLOT(on_jumpBackward_triggered()));
     m_jumpForwardAction = createAction(tr("Jump for&ward"), QLatin1String("jumpForward"), QLatin1String("media-seek-forward"), QKeySequence(Qt::CTRL + Qt::SHIFT + Qt::Key_Return), SLOT(on_jumpForward_triggered()));
@@ -3204,16 +3207,15 @@
     m_multiplePagesModeAction = createAction(tr("&Multiple pages"), QLatin1String("multiplePagesMode"), QIcon(QLatin1String(":icons/multiple-pages")), QKeySequence(Qt::CTRL + Qt::Key_4), SLOT(on_multiplePagesMode_triggered(bool)), true);
 
     m_rightToLeftModeAction = createAction(tr("Right to left"), QLatin1String("rightToLeftMode"), QIcon(QLatin1String(":icons/right-to-left")), QKeySequence(Qt::CTRL + Qt::SHIFT + Qt::Key_R), SLOT(on_rightToLeftMode_triggered(bool)), true);
-
-    m_zoomInAction = createAction(tr("Zoom &in"), QLatin1String("zoomIn"), QLatin1String("zoom-in"), QKeySequence(Qt::CTRL + Qt::Key_Up), SLOT(on_zoomIn_triggered()));
-    m_zoomOutAction = createAction(tr("Zoom &out"), QLatin1String("zoomOut"), QLatin1String("zoom-out"), QKeySequence(Qt::CTRL + Qt::Key_Down), SLOT(on_zoomOut_triggered()));
+    m_zoomInAction = createAction(tr("Zoom &in"), QLatin1String("zoomIn"), QLatin1String("zoom-in"), ShortcutHandler::defaultZoomInSequence(), SLOT(on_zoomIn_triggered()));
+    m_zoomOutAction = createAction(tr("Zoom &out"), QLatin1String("zoomOut"), QLatin1String("zoom-out"), ShortcutHandler::defaultZoomOutSequence(), SLOT(on_zoomOut_triggered()));
     m_originalSizeAction = createAction(tr("Original &size"), QLatin1String("originalSize"), QLatin1String("zoom-original"), QKeySequence(Qt::CTRL + Qt::Key_0), SLOT(on_originalSize_triggered()));
 
     m_fitToPageWidthModeAction = createAction(tr("Fit to page width"), QLatin1String("fitToPageWidthMode"), QIcon(QLatin1String(":icons/fit-to-page-width")), QKeySequence(Qt::CTRL + Qt::Key_9), SLOT(on_fitToPageWidthMode_triggered(bool)), true);
     m_fitToPageSizeModeAction = createAction(tr("Fit to page size"), QLatin1String("fitToPageSizeMode"), QIcon(QLatin1String(":icons/fit-to-page-size")), QKeySequence(Qt::CTRL + Qt::Key_8), SLOT(on_fitToPageSizeMode_triggered(bool)), true);
 
-    m_rotateLeftAction = createAction(tr("Rotate &left"), QLatin1String("rotateLeft"), QLatin1String("object-rotate-left"), QKeySequence(Qt::CTRL + Qt::Key_Left), SLOT(on_rotateLeft_triggered()));
-    m_rotateRightAction = createAction(tr("Rotate &right"), QLatin1String("rotateRight"), QLatin1String("object-rotate-right"), QKeySequence(Qt::CTRL + Qt::Key_Right), SLOT(on_rotateRight_triggered()));
+    m_rotateLeftAction = createAction(tr("Rotate &left"), QLatin1String("rotateLeft"), QLatin1String("object-rotate-left"), ShortcutHandler::defaultRotateLeftSequence(), SLOT(on_rotateLeft_triggered()));
+    m_rotateRightAction = createAction(tr("Rotate &right"), QLatin1String("rotateRight"), QLatin1String("object-rotate-right"), ShortcutHandler::defaultRotateRightSequence(), SLOT(on_rotateRight_triggered()));
 
     m_invertColorsAction = createAction(tr("Invert colors"), QLatin1String("invertColors"), QIcon(), QKeySequence(Qt::CTRL + Qt::Key_I), SLOT(on_invertColors_triggered(bool)), true);
     m_convertToGrayscaleAction = createAction(tr("Convert to grayscale"), QLatin1String("convertToGrayscale"), QIcon(), QKeySequence(Qt::CTRL + Qt::Key_U), SLOT(on_convertToGrayscale_triggered(bool)), true);
@@ -3224,13 +3226,13 @@
 
     m_fontsAction = createAction(tr("Fonts..."), QString(), QIcon(), QKeySequence(), SLOT(on_fonts_triggered()));
 
-    m_fullscreenAction = createAction(tr("&Fullscreen"), QLatin1String("fullscreen"), QLatin1String("view-fullscreen"), QKeySequence(Qt::Key_F11), SLOT(on_fullscreen_triggered(bool)), true);
-    m_presentationAction = createAction(tr("&Presentation..."), QLatin1String("presentation"), QLatin1String("x-office-presentation"), QKeySequence(Qt::Key_F12), SLOT(on_presentation_triggered()));
+    m_fullscreenAction = createAction(tr("&Fullscreen"), QLatin1String("fullscreen"), QLatin1String("view-fullscreen"), ShortcutHandler::defaultFullScreenSequence(), SLOT(on_fullscreen_triggered(bool)), true);
+    m_presentationAction = createAction(tr("&Presentation..."), QLatin1String("presentation"), QLatin1String("x-office-presentation"), ShortcutHandler::defaultPresentSequence(), SLOT(on_presentation_triggered()));
 
     // tabs
 
-    m_previousTabAction = createAction(tr("&Previous tab"), QLatin1String("previousTab"), QIcon(), QKeySequence::PreviousChild, SLOT(on_previousTab_triggered()));
-    m_nextTabAction = createAction(tr("&Next tab"), QLatin1String("nextTab"), QIcon(), QKeySequence::NextChild, SLOT(on_nextTab_triggered()));
+    m_previousTabAction = createAction(tr("&Previous tab"), QLatin1String("previousTab"), QIcon(), ShortcutHandler::defaultPrevTabSequence(), SLOT(on_previousTab_triggered()));
+    m_nextTabAction = createAction(tr("&Next tab"), QLatin1String("nextTab"), QIcon(), ShortcutHandler::defaultNextTabSequence(), SLOT(on_nextTab_triggered()));
 
     m_closeTabAction = createAction(tr("&Close tab"), QLatin1String("closeTab"), QIcon::fromTheme("window-close"), QKeySequence(Qt::CTRL + Qt::Key_W), SLOT(on_closeTab_triggered()));
     m_closeAllTabsAction = createAction(tr("Close &all tabs"), QLatin1String("closeAllTabs"), QIcon(), QKeySequence(Qt::CTRL + Qt::SHIFT + Qt::Key_W), SLOT(on_closeAllTabs_triggered()));

=== modified file 'sources/shortcuthandler.cpp'
--- sources/shortcuthandler.cpp	2016-05-13 21:32:49 +0000
+++ sources/shortcuthandler.cpp	2020-01-02 18:55:20 +0000
@@ -189,6 +189,116 @@
     return false;
 }
 
+QKeySequence ShortcutHandler::defaultZoomInSequence()
+{
+#ifdef Q_OS_MAC
+    return QKeySequence(Qt::CTRL + Qt::Key_Plus);
+#else
+    return QKeySequence(Qt::CTRL + Qt::Key_Up);
+#endif
+}
+
+QKeySequence ShortcutHandler::defaultZoomOutSequence()
+{
+#ifdef Q_OS_MAC
+    return QKeySequence(Qt::CTRL + Qt::Key_Minus);
+#else
+    return QKeySequence(Qt::CTRL + Qt::Key_Down);
+#endif
+}
+
+QKeySequence ShortcutHandler::defaultRotateLeftSequence()
+{
+#ifdef Q_OS_MAC
+    return QKeySequence(Qt::CTRL + Qt::Key_L);
+#else
+    return QKeySequence(Qt::CTRL + Qt::Key_Left);
+#endif
+}
+
+QKeySequence ShortcutHandler::defaultRotateRightSequence()
+{
+#ifdef Q_OS_MAC
+    return QKeySequence(Qt::CTRL + Qt::Key_R);
+#else
+    return QKeySequence(Qt::CTRL + Qt::Key_Right);
+#endif
+}
+
+QKeySequence ShortcutHandler::defaultRefreshSequence()
+{
+#ifdef Q_OS_MAC
+    // Normally CMD+R is used, but Preview.app has no such hotkey, and CMD+R is otherwise
+    // standard for rotate right action.
+    return QKeySequence();
+#else
+    return QKeySequence(QKeySequence::Refresh);
+#endif
+}
+
+QKeySequence ShortcutHandler::defaultNextPageSequence()
+{
+#ifdef Q_OS_MAC
+    return QKeySequence(Qt::ALT + Qt::Key_Down);
+#else
+    return QKeySequence(Qt::Key_Space);
+#endif
+}
+
+QKeySequence ShortcutHandler::defaultPrevPageSequence()
+{
+#ifdef Q_OS_MAC
+    return QKeySequence(Qt::ALT + Qt::Key_Up);
+#else
+    return QKeySequence(Qt::Key_Backspace);
+#endif
+}
+
+QKeySequence ShortcutHandler::defaultJumpPageSequence()
+{
+#ifdef Q_OS_MAC
+    return QKeySequence(Qt::CTRL + Qt::ALT + Qt::Key_G);
+#else
+    return QKeySequence(Qt::CTRL + Qt::Key_J);
+#endif
+}
+
+QKeySequence ShortcutHandler::defaultFullScreenSequence()
+{
+#ifdef Q_OS_MAC
+    return QKeySequence(Qt::CTRL + Qt::META + Qt::Key_F);
+#else
+    return QKeySequence(Qt::Key_F11);
+#endif
+}
+
+QKeySequence ShortcutHandler::defaultPresentSequence()
+{
+#ifdef Q_OS_MAC
+    return QKeySequence(Qt::CTRL + Qt::SHIFT + Qt::Key_F);
+#else
+    return QKeySequence(Qt::Key_F12);
+#endif
+}
+
+QKeySequence ShortcutHandler::defaultNextTabSequence()
+{
+#ifdef Q_OS_MAC
+    return QKeySequence(Qt::META + Qt::Key_Tab);
+#else
+    return QKeySequence::NextChild;
+#endif
+}
+
+QKeySequence ShortcutHandler::defaultPrevTabSequence()
+{
+#ifdef Q_OS_MAC
+    return QKeySequence(Qt::META + Qt::SHIFT + Qt::Key_Tab);
+#else
+    return QKeySequence::PreviousChild;
+#endif
+}
+
 bool ShortcutHandler::matchesSkipBackward(const QKeySequence& keySequence) const
 {
     return matches(keySequence, m_skipBackwardAction->shortcuts());

=== modified file 'sources/shortcuthandler.h'
--- sources/shortcuthandler.h	2016-05-13 21:32:49 +0000
+++ sources/shortcuthandler.h	2020-01-02 18:55:22 +0000
@@ -59,6 +59,19 @@
     bool matchesMoveLeft(const QKeySequence& keySequence) const;
     bool matchesMoveRight(const QKeySequence& keySequence) const;
 
+    static QKeySequence defaultZoomInSequence();
+    static QKeySequence defaultZoomOutSequence();
+    static QKeySequence defaultRotateLeftSequence();
+    static QKeySequence defaultRotateRightSequence();
+    static QKeySequence defaultRefreshSequence();
+    static QKeySequence defaultNextPageSequence();
+    static QKeySequence defaultPrevPageSequence();
+    static QKeySequence defaultJumpPageSequence();
+    static QKeySequence defaultFullScreenSequence();
+    static QKeySequence defaultPresentSequence();
+    static QKeySequence defaultNextTabSequence();
+    static QKeySequence defaultPrevTabSequence();
+
 public slots:
     bool submit();
     void revert();

